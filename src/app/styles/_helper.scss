// -----------------------------------------------------------------------------------------------------
// @ Size helpers
// -----------------------------------------------------------------------------------------------------
@each $prop, $abbrev in (height: h, width: w) {
  @for $index from 0 through 180 {
    $size: $index * 4;
    $length: #{$size}px;

    .#{$abbrev}-#{$size} {
      #{$prop}: $length !important;
      min-#{$prop}: $length !important;
      max-#{$prop}: $length !important;
    }
  }

  // Percentage
  @for $i from 0 through 20 {
    $i-p: 5 * $i;
    $size-p: 5% * $i;

    .#{$abbrev}-#{$i-p}-p {
      #{$prop}: $size-p !important;
    }
  }
}

// -----------------------------------------------------------------------------------------------------
// @ Spacing helpers
// -----------------------------------------------------------------------------------------------------
@each $breakpoint, $materialBreakpoint in $helper-breakpoints {
  @include media-breakpoint($materialBreakpoint) {
    $infix: if($materialBreakpoint == null, "", "-#{$breakpoint}");

    @each $prop, $abbrev in (margin: mg, padding: pd) {
      @for $index from 0 through 64 {
        $size: $index * 2;
        $length: #{$size}px;

        .#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }
      }

      @for $index from 0 through 64 {
        $size: $index * 2;
        $length: #{$size}px;

        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-right: $length !important;
          #{$prop}-left: $length !important;
        }

        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-top: $length !important;
          #{$prop}-bottom: $length !important;
        }
      }

      @for $index from 0 through 64 {
        $size: $index * 2;
        $length: #{$size}px;

        .#{$abbrev}t#{$infix}-#{$size} {
          #{$prop}-top: $length !important;
        }

        .#{$abbrev}r#{$infix}-#{$size} {
          #{$prop}-right: $length !important;
        }

        .#{$abbrev}b#{$infix}-#{$size} {
          #{$prop}-bottom: $length !important;
        }

        .#{$abbrev}l#{$infix}-#{$size} {
          #{$prop}-left: $length !important;
        }
      }

      @if ($abbrev == mg) {
        // Some special margin utils for flex alignments
        .m#{$infix}-auto {
          margin: auto !important;
        }

        .mt#{$infix}-auto {
          margin-top: auto !important;
        }

        .mr#{$infix}-auto {
          margin-right: auto !important;
        }

        .mb#{$infix}-auto {
          margin-bottom: auto !important;
        }

        .ml#{$infix}-auto {
          margin-left: auto !important;
        }

        .mx#{$infix}-auto {
          margin-right: auto !important;
          margin-left: auto !important;
        }

        .my#{$infix}-auto {
          margin-top: auto !important;
          margin-bottom: auto !important;
        }
      }
    }
  }
}

.clickable {
  cursor: pointer;
}

.d-flex {
  display: flex;
}

.d-block {
  display: block;
}

// Utils
.w-100 {
  width: 100%;
}

.p-text-center {
  text-align: center;
}

.p-text-right {
  text-align: right;
}

.p-align-self-center {
  align-self: center;
}

.font-weight-bold {
  font-weight: bold;
}

.p-menu {
  background-clip: border-box !important;
  border: 0 solid rgba(0, 0, 0, 0.125) !important;
  box-shadow: 6px 0 18px 0 rgba(3, 3, 3, 0.5) !important;
  .ui-submenu-header,
  .ui-menuitem-text {
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

.ui-menuitem {
  &.active .ui-menuitem-text {
    color: $color-primary !important;
  }
}

.truncate {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

@mixin truncate() {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}
